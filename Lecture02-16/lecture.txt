Lecture Notes for 2/16/2017:
----------------------------

-> I feel like crap today.
-> More combinator talk
-> List Folding:
: 0, 1, 2, 3, ..., 8, 9
: You can traverse left to right, or right to left.
: Left: Begin with an intialized point, and then do repetitive application from these points out. Right is very symmetric with this, despite adverse memory cost due to stack usage.
: Stopping at a number -> Can do an exception at this point once reached, or instead do a count upto it.
: This folding is not so much an arbitrary technique, but more so a specific relative to list operations I guess.
: Go look at this link: http://ats-lang.sourceforge.net/EXAMPLE/EFFECTIVATS/list-folding/main.html

-> Another data type, called "option"
  > "datatype option(a:t@ype) = "
  > "| None of ()"
  > "| Some of (a)"
-> Technically a list of length 0 or 1

-> There's some search stuff too I guess. 
-> Collision tests

Ok, that takes care of combinators I guess.
--------------------------------------------------------------------------------------------

Exceptions:
-----------
-> For stuff
Here's a thing:

extern 
fun list0_mult(xs: list0(int)): int

implement
list0_mult(xs) = 
( case+ xs of
  | list0_nil() => 1 
  | list0_cons(x, xs) => if(x = 0) then 0 else ( x * list0_mult(xs) )
)

/* Combinator style: list0_foldleft<int><int>(xs, 1, lam(res, x) => res*x) */

xs = 1, 2, 3, 0, 4, 5
mult = 1, 2, 3, 0 ... [1st frame]
mult = 2, 3, 0 ... [2nd frame]
mult = 3, 0 ... [3rd frame]
mult = 0 ... [4th frame]

-> The recursive calls only rollback at a one frame pace.
-> The magic of an exception will allow you to jump immediately back to the 1st frame.
So...

implement
list0_mult(xs) = 
  let
    exception ZERO
    fun aux(xs: list0(int)): int =
    ( 
      case+ xs of
      | list0_nil() => 1 
      | list0_cons(x, xs) => if(x = 0) then $raise ZERO else ( x * list0_mult(xs) )
    )
  in
    aux(xs)
  end

--------------------------------------------------------------------------------------------
